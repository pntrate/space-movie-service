// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movies.Persistence.Db;

#nullable disable

namespace Movies.Persistence.Migrations.Initial
{
    [DbContext(typeof(WatchlistDbContext))]
    [Migration("20230703074818_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("movie")
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Movies.Domain.Entities.Watchlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("LastUpdateDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("Watchlist", "movie");
                });

            modelBuilder.Entity("Movies.Domain.Entities.WatchlistMovie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreateDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Image");

                    b.Property<string>("ImdbMovieId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ImdbMovieId");

                    b.Property<bool>("IsWatched")
                        .HasColumnType("bit")
                        .HasColumnName("IsWatched");

                    b.Property<string>("MovieTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MovieTitle");

                    b.Property<DateTime?>("WatchDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("WatchDate");

                    b.Property<Guid>("WatchlistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("WatchlistId");

                    b.HasKey("Id");

                    b.HasIndex("WatchlistId");

                    b.ToTable("WatchlistMovie", "movie");
                });

            modelBuilder.Entity("Movies.Domain.Entities.WatchlistMovie", b =>
                {
                    b.HasOne("Movies.Domain.Entities.Watchlist", null)
                        .WithMany("Movies")
                        .HasForeignKey("WatchlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Movies.Domain.Entities.Watchlist", b =>
                {
                    b.Navigation("Movies");
                });
#pragma warning restore 612, 618
        }
    }
}
